// <auto-generated />
using System;
using APIBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIBackend.Migrations.Products
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906101953_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("APIBackend.Models.Customer", b =>
                {
                    b.Property<string>("CustomerIdCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerIdCode");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("APIBackend.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerIdCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.HasIndex("CustomerIdCode");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("APIBackend.Models.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("APIBackend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("APIBackend.Models.Unit", b =>
                {
                    b.Property<string>("UnitIdCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Capacity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ServiceDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UnitIdCode");

                    b.HasIndex("LocationId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("APIBackend.Models.UnitHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InvoiceCost")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServiceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Technician")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitIdCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UnitIdCode");

                    b.ToTable("UnitHistories");
                });

            modelBuilder.Entity("APIBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APIBackend.Models.Location", b =>
                {
                    b.HasOne("APIBackend.Models.Customer", "Customer")
                        .WithMany("Locations")
                        .HasForeignKey("CustomerIdCode");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APIBackend.Models.Unit", b =>
                {
                    b.HasOne("APIBackend.Models.Location", "Location")
                        .WithMany("Units")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("APIBackend.Models.UnitHistory", b =>
                {
                    b.HasOne("APIBackend.Models.Unit", "Unit")
                        .WithMany("UnitHistories")
                        .HasForeignKey("UnitIdCode");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("APIBackend.Models.Customer", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("APIBackend.Models.Location", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("APIBackend.Models.Unit", b =>
                {
                    b.Navigation("UnitHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
